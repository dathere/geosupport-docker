#!/bin/bash

# Created by argbash-init v2.6.1
# ARG_OPTIONAL_SINGLE([version])
# ARG_POSITIONAL_SINGLE([geosupport-release])
# ARG_POSITIONAL_SINGLE([geosupport-version])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_geosupport_release=
_arg_geosupport_version=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_version=

print_help ()
{
	printf '%s\n\n' "Building geosupport-docker images"
	printf 'Usage: %s [--version <arg>] [-h|--help] <geosupport-release> <geosupport-version>\n\n' "$0"
	printf '\t%s\n\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_version="$2"
				shift
				;;
			--version=*)
				_arg_version="${_key##--version=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_positionals+=("$1")
				;;
		esac
		shift
	done
}


handle_passed_args_count ()
{
	_required_args_string="'geosupport-release' and 'geosupport-version'"
	test ${#_positionals[@]} -ge 2 || _PRINT_HELP=yes die "[ERROR] Not enough positional arguments - Exactly 2 required (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
	test ${#_positionals[@]} -le 2 || _PRINT_HELP=yes die "[ERROR] Unexpected positional arguments - Exactly 2 expected (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_geosupport_release' '_arg_geosupport_version' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


printf '\n\n'
printf '%s: %s\n' '--version' "$_arg_version"
printf "'%s': %s\\n" 'geosupport-release' "$_arg_geosupport_release"
printf "'%s': %s\\n" 'geosupport-version' "$_arg_geosupport_version"
printf '\n\n'

# ] <-- needed because of Argbash

GEOSUPPORT_RELEASE="$_arg_geosupport_release"
GEOSUPPORT_VERSION="$_arg_geosupport_version"
if [[ -n "$_arg_version" ]] || [[ "$_arg_version" == "latest" ]]; then
VERSION="$_arg_version"
else
VERSION=${GEOSUPPORT_RELEASE}_${GEOSUPPORT_VERSION}
fi

printf '\n%s\n' "Building geosupport-docker:${VERSION}-onbuild"
echo docker build -t mlipper/geosupport-docker:${VERSION}-onbuild \
             -f Dockerfile.onbuild .

printf '\n%s\n' "Building geosupport-docker:${VERSION}"
echo docker build --build-arg VERSION=${VERSION} \
             -t mlipper/geosupport-docker:${VERSION} \
             -f Dockerfile .

printf '\n%s\n' "Building geosupport-docker:${VERSION}-dvc"
echo docker build --build-arg VERSION=${VERSION} \
             -t mlipper/geosupport-docker:${VERSION}-dvc \
             -f Dockerfile.dvc .

printf '\n%s\n' "Creating volume gsvolume-${VERSION}"
echo docker volume create --name gsvolume-${VERSION}

printf '\n\n'
echo docker run -d --name geosupport-${VERSION}-dvc \
              --volume gsvolume-${VERSION}-dvc:/opt/geosupport \
              -e GEOSUPPORT_RELEASE=${GEOSUPPORT_RELEASE} \
              -e GEOSUPPORT_VERSION=${GEOSUPPORT_VERSION} \
              mlipper/geosupport-docker:${VERSION}-dvc

printf '\n\nBuild complete.\n\n'
